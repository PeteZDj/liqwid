/*       *      Copyright 2009 (c) Scott Penberthy, scottpenberthy.com. All Rights Reserved. *       *      This software is distributed under commercial and open source licenses. *      You may use the GPL open source license described below or you may acquire  *      a commercial license from scottpenberthy.com. You agree to be fully bound  *      by the terms of either license. Consult the LICENSE.TXT distributed with  *      this software for full details. *       *      This software is open source; you can redistribute it and/or modify it  *      under the terms of the GNU General Public License as published by the  *      Free Software Foundation; either version 2 of the License, or (at your  *      option) any later version. See the GNU General Public License for more  *      details at: http://scottpenberthy.com/legal/gplLicense.html *       *      This program is distributed WITHOUT ANY WARRANTY; without even the  *      implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  *       *      This GPL license does NOT permit incorporating this software into  *      proprietary programs. If you are unable to comply with the GPL, you must *      acquire a commercial license to use this software. Commercial licenses  *      for this software and support services are available by contacting *      scott.penberthy@gmail.com. * */package com.jsp.feeds { 	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.events.Event;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.events.EventDispatcher;		import com.jsp.events.LiqwidEvent;	public class PresetFeed extends EventDispatcher {				private var _presets:Array;		private var _file:String;		private var _request:URLRequest;		private var _loader:URLLoader;					private var _author:String = null;		private var _title:String;		private var _base:String;				public function PresetFeed(file:String):void {			_file = file;			_base = '';			//trace("creating preset feed for "+file);			init();		}				private function init():void {			var u:URLRequest = new URLRequest(_file);			var l:URLLoader = new URLLoader();						l.addEventListener(Event.COMPLETE, gotFeed);			l.addEventListener(IOErrorEvent.IO_ERROR, ioError);			l.addEventListener(SecurityErrorEvent.SECURITY_ERROR, secError);			_request = u;			_loader = l;			_presets = null;			_loader.load(_request);		}				private function parse(dat:XML):Array {			var arr:Array = new Array();			if (dat.localName() == 'milkdrop') {				_base = dat.@base ? dat.@base : '';				for each (var j:XML in dat.children()) {					if(j.name() == 'preset') {						arr.push(unescape(j.@href));					}				}			}			trace("Found "+arr.length+" presets");			return arr;		}				private function gotFeed(e:Event):void {			_presets = parse(XML(_loader.data));			//dispatchEvent(new Event(Event.COMPLETE, true, false));		}		public function randomPreset():void {			//			// Load a random preset, then fire a LiqwidEvent.PRESET event			//			if (_presets && (_author == null)) {				var i:Number = Math.floor(Math.random()*_presets.length);				var fname:String = _presets[i];				var components:Array = fname.split(' - ');				var r:URLRequest = new URLRequest(_base + fname);			 	var l:URLLoader = new URLLoader();								_author = components[0];				if (components.length > 1) {					_title = components[1].split('.')[0];				}				else {					_title = _author.split('.')[0];					_author = 'Nobody';				}				l.addEventListener(Event.COMPLETE, gotPreset);				l.addEventListener(IOErrorEvent.IO_ERROR, ioError);				l.addEventListener(SecurityErrorEvent.SECURITY_ERROR, secError);				l.load(r);			}		}				private function gotPreset(e:Event):void {			var l:URLLoader = e.target as URLLoader;			var preset:String = l.data;						dispatchEvent(new LiqwidEvent(LiqwidEvent.PRESET, {preset: preset, author: _author, title: _title}, true, false));			_title = null;			_author = null;		}				//		// Ignoring errors for now.  We need error handling.		//				private function ioError(e:IOErrorEvent):void {			trace("IO error in PresetFeed: "+e.text);			_author = null;		}				private function secError(e:SecurityErrorEvent):void {			trace("Security error in PresetFeed: "+e.text);			_author = null;		}	}}