/*       *      Copyright 2009 (c) Scott Penberthy, scottpenberthy.com. All Rights Reserved. *       *      This software is distributed under commercial and open source licenses. *      You may use the GPL open source license described below or you may acquire  *      a commercial license from scottpenberthy.com. You agree to be fully bound  *      by the terms of either license. Consult the LICENSE.TXT distributed with  *      this software for full details. *       *      This software is open source; you can redistribute it and/or modify it  *      under the terms of the GNU General Public License as published by the  *      Free Software Foundation; either version 2 of the License, or (at your  *      option) any later version. See the GNU General Public License for more  *      details at: http://scottpenberthy.com/legal/gplLicense.html *       *      This program is distributed WITHOUT ANY WARRANTY; without even the  *      implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  *       *      This GPL license does NOT permit incorporating this software into  *      proprietary programs. If you are unable to comply with the GPL, you must *      acquire a commercial license to use this software. Commercial licenses  *      for this software and support services are available by contacting *      scott.penberthy@gmail.com. * */package com.jsp.plugin { 		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.utils.Timer;	import flash.utils.getTimer;	import flash.events.ContextMenuEvent;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.ui.ContextMenu;	import flash.ui.ContextMenuItem;		import com.jeroenwijering.events.*;	import com.jeroenwijering.utils.*;		import com.jsp.audio.MusicAnalyzer;	import com.jsp.audio.Wave;	import com.jsp.calculator.*;	import com.jsp.events.LiqwidEvent;	import com.jsp.graphics.Border;	import com.jsp.graphics.Flickr;	import com.jsp.graphics.Frame;	import com.jsp.graphics.uvPolygon;	import com.jsp.graphics.Shader;   	import com.jsp.graphics.SlideShow;	import com.jsp.video.Webcam;		public class Liqwid extends Sprite implements PluginInterface {				private var _programs:Array = 	["zoom=min(0.9*zoom+0.1*amp,6)*(1+sin(time*3.14)*0.25); zoom_exp=min(2,0.9*zoom_exp + 0.1*amp); dx = 0.5*(sin(time*3.1415/4)+1);",	 "zoom=if(above(amp,1),1+rad*rad,1-0.5*rad);cx=treb;cy=treb;zoom_exp=(0.9*zoom_exp+0.1*amp);warp=if(above(bass,1),2*bass,0);warp_speed=amp",	 "xx=if(above(rand(1),0.5),treb,bass);cx=0.9*cx+0.1*xx;cy=cy*0.9+0.1*(0.5+0.5*amp);dx=dx*0.98+0.02*amp*sin(time);dy=dy*0.98+0.02*amp*cos(time)"];		private var _testImages:Array = 	['http://localhost/mesh/slides.xml',	 'http://feed284.photobucket.com/albums/ll15/wolftr33/beach%20ass/feed.rss',	 'http://api.flickr.com/services/feeds/photos_public.gne?id=33643654@N07&lang=en-us&format=rss_200',	 'http://api.flickr.com/services/feeds/photos_public.gne?id=93559610@N00&lang=en-us&format=rss_200',	 'flickr'	 ];	    /** Reference to the JW Player‚Äôs View object. **/    private var view:AbstractView;	private var _clip:Sprite;	private var _display:Sprite;		private var _wave:Wave;	private var _frame:Frame;	private var _border:Border;	private var _flickr:Flickr;	private var _show:SlideShow;	private var _src:BitmapData = null;	private var _shader:Shader;	private var _time:Number;	private var _t:Number;	private var _ma:MusicAnalyzer;	private var _timer:Timer;	private var _lastShapeTime:Number = 0;	private var _shaderTime:Number=0;	private var _view:AbstractView;	private var _w:Number;	private var _h:Number;    /** This function is automatically called by the player after the plugin has loaded. **/    public function initializePlugin(vw:AbstractView):void {		_view = vw;		init();	}		private var _cam:Webcam;	private function init():void {		var t:Token = new Token();		var m:Milk = new Milk();				_w = _view.config['width'];		_h = _view.config['height'];		stage.align = StageAlign.TOP_LEFT;		stage.scaleMode = StageScaleMode.NO_SCALE;			reconfig();		createElements();		pickShader();		aboutItem();		listeners();		getPictures();		//useCamera();	}		private function createElements():void {		_display = _view.skin['display'];		_clip = new Sprite();		addChild(_clip);		_clip.visible = false;		_ma = new MusicAnalyzer();		_timer = new Timer(50);		_time = getTimer();		_t = 0;		_timer.addEventListener(TimerEvent.TIMER, musicTic);		_frame = new Frame(_w,_h);		_wave = _frame.wave;		_border = _frame.border;		_show = null;		_shader = new Shader(8,10,_w,_h);		_clip.addChild(_frame);	}		private function pickShader():void {		_shaderTime = getTimer();		_shader.storeProgram(_programs[Math.floor(Math.random()*_programs.length)]);	}		private function getPictures():void {		if (_view.config['liqwid.images'] == undefined) return;		if (_view.config['liqwid.images'] == 'flickr') testFlickr();		else {			var pl:Playlister = new Playlister();			pl.addEventListener(Event.COMPLETE, gotPictures);			pl.load(_view.config['liqwid.images']);		}	}		private function gotPictures(e:Event):void {		var pl:Playlister = e.target as Playlister;		var pics:Array = new Array();		var list:Object = pl.playlist;		for (var i:int=0; i < list.length; i++) {			var o:Object = list[i];			if (o['file']) {				pics.push({source: o['file']});			}			else if (o['image']) {				pics.push({source: o['image']});			}		}		if (pics.length > 0) {			//trace("Found "+pics.length+" photos in the feed.");			_show = new SlideShow(pics,parseInt(_view.config['liqwid.speed']));		}	}		private function useCamera():void {		_cam = new Webcam();		_cam.startCamera();	}		private function reconfig():void {		_view.config['aboutliqwid'] = "About Liqwid";		_view.config['liqwidlink'] = "http://scottpenberthy.com/liqwid";		_view.config['liqwid.images'] = _testImages[0];		_view.config['liqwid.speed'] = '3';		_view.config['liqwid.presets'] = '';  // list of presets		_view.config['file'] = 'http://localhost/mesh/music.xml';		//_view.config['file'] = projectPlaylist('2816289291');		//_view.config['file'] = projectPlaylist('2921344267');		//_view.config['file'] = projectPlaylist('2839366155');		//_view.config['file'] = projectPlaylist('3012758283');		//_view.config['file'] = projectPlaylist('15073438987');		_view.sendEvent('LOAD', _view.config);		//_view.config['icons'] = true;	}		private function projectPlaylist(id:String):String {		return 'http://scottpenberthy.com/mesh/proxy.php?u='+escape('http://pl.playlist.com/pl.php?e=1&playlist='+id);	}			private function listeners():void {		_view.addModelListener(ModelEvent.STATE,stateHandler);		_view.addModelListener(ModelEvent.META,metaHandler);		_view.addControllerListener(ControllerEvent.RESIZE,resizeHandler);		_view.addControllerListener(ControllerEvent.STOP,stopHandler);		_clip.addEventListener(MouseEvent.CLICK, clickHandler);	}	private function metaHandler(e:ModelEvent):void {		//trace("Heard meta! "+e.data);		if (e.data.artist) trace("Artist: "+e.data.artist);		if (e.data.song) trace("Song: "+e.data.song);		if (e.data.album) trace("Album: "+e.data.album);		if (e.data.year) trace("Year: "+e.data.year);	}		    /** Add a fullscreen menu item. **/	private function aboutItem():void {		if(_view.config['aboutliqwid']) {			var context:ContextMenu = _view.skin.contextMenu;			var itm:ContextMenuItem = new ContextMenuItem(_view.config['aboutliqwid']+'...');			itm.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,aboutHandler);			itm.separatorBefore = false;			context.customItems.push(itm);		}	}	/** jump to the about page. **/	private function aboutHandler(evt:ContextMenuEvent):void {		navigateToURL(new URLRequest(_view.config['liqwidlink']),'_blank');	}	 /** Only show the visualizer when content is playing. **/      private function stateHandler(evt:ModelEvent=null) {		  var s:String = _view.config['state'];		  //trace("Heard state "+s);		  if (s == ModelStates.PLAYING || s == ModelStates.BUFFERING) play();		  if (s == ModelStates.PAUSED) pause();	  }	private function testFlickr():void {		_flickr = new Flickr();		_flickr.addEventListener(LiqwidEvent.IMAGE_LIST, gotFlickrImages);		_flickr.interestingPhotos();	}			private function gotFlickrImages(e:LiqwidEvent):void {		var photos:Array = e.data.imageList;		//trace("Flickr found "+photos.length+" photographs.");		_show = new SlideShow(photos,3);	}		private function play():void {		//trace("** Starting visualizer");		_time = getTimer();		_t = 0;		_timer.start();		if (_show) _show.start();		_clip.visible = true;	}		private function pause():void {		_timer.stop();		_t = 0;		_time = getTimer();		if (_show) _show.stop();		//_clip.visible = false;	}		private function musicTic(t:TimerEvent):void {		/**		if (_t > 30) {			// stop after 30 seconds for non-commercial version			_timer.stop();			_show.stop();		}		**/		_t = 0.001*(getTimer()-_time);		_ma.sample();		_src = _frame.raw;		updatePic();		updateWave();	}		private function updatePic():void {		if ((getTimer() - _shaderTime)*0.001 > 10) {			pickShader();		}		_shader.store('bass',_ma.bass);		_shader.store('treb',_ma.treble);		_shader.store('amp',_ma.treble);		_shader.store('time',_t);		_shader.motionVectors(4,4,_ma.treble/6,_ma.mid/6,_ma.bass/2,_ma.amp/6);		_shader.mv_l = _ma.amp/4;		if (_src) {			_shader.run(_t);			_shader.drawMotionVectors(_frame.buffer);			_shader.textureMap(_frame.buffer, _frame.raw);		}	}		private function updateWave():void {		var sint:Number = Math.sin(_t);		var cost:Number = Math.cos(_t);		//_wave.dots = true;		//_wave.scale = 1.2;		_wave.uv(0.5+0.1*sint, 0.5+0.1*cost); //0.5,0.0);		_wave.setColor(_ma.bass/2, _ma.mid/2, _ma.treble/2, _ma.amp/2);		//_wave.setGlow(0.2+_ma.bass/4, _ma.bass, 1, 1, _ma.amp/2);		_wave.setLevels(_ma.bass, _ma.mid, _ma.treble);		_wave.sample(_ma.L, _ma.R, Wave.MILKDROP_7);		_wave.progress = _t;		_wave.mystery = 0.2*sint;		_wave.blur = 0.2;		_wave.thick = 1;		//_wave.glow = 0.1;		_border.outer((sint+1)*0.5,_ma.bass/4*sint,_ma.bass/4,_ma.mid,0.02);		_border.inner(_ma.amp/4,_ma.amp/4,(cost+1)*0.5,_ma.mid,0.02);		_frame.decay = 0.98;		var zTarget:Number = Math.max(0.4,_ma.bass/_ma.amp);		var zOld:Number = _frame.echoZoom;		_frame.echoZoom = zOld*0.92+zTarget*0.08;		randomShape(_frame.shape(0));		_frame.border.blur = 0; //Math.max(0,_ma.bass/4-0.25);		_frame.echo = true;		_frame.render();	}		private function randomShape(shape:uvPolygon):void {		var d:Number = Math.sin(_t)*0.5;		if ((_t - _lastShapeTime) >  2) {			_lastShapeTime = _t;			shape.sides = Math.random()*12;			shape.inner(Math.random(),Math.random(),Math.random(),Math.random());			shape.outer(Math.random(),Math.random(),Math.random(),Math.random());			shape.border(Math.random(),Math.random(),Math.random(),Math.random());			shape.uv(Math.random(),Math.random());			_frame.echoOrient = Math.floor(Math.random()*4);			_frame.echoAlpha = 0.1;		}		if (_show && _show.raw) shape.useTexture(_show.raw);		else if (_cam) shape.useTexture(_cam.raw);		shape.progress = _t;		shape.tex_zoom = shape.tex_zoom*0.9 + 0.1*(0.2+0.8*_ma.bass);		shape.rad = shape.rad*0.9 + 0.1*(0.1+0.4*_ma.amp);		shape.u0 = shape.u0*0.98 + 0.02*d;		shape.v0 = shape.v0*0.98 + 0.02*d;				//shape.uv(0.5,0.35);		shape.active = true;	}		private function resizeHandler(e:ControllerEvent):void {		//trace("Config size is "+_view.config['width']+"x"+_view.config['height']);		if (stage.displayState == 'fullScreen') {			_frame.onStageResize();            _frame.x = _frame.y = 0;            _shader.resize(stage.stageWidth, stage.stageHeight);            _shader.setTextureSize(stage.stageWidth, stage.stageHeight);        }        else {			_w = _view.config['width'];			_h = _view.config['height'];           _shader.resize(_w,_h);           _shader.setTextureSize(_w,_h);           _frame.x = _frame.y = 0;		   _frame.resize(_w,_h);        }        _src = _frame.raw;	}		private function stopHandler(e:ControllerEvent):void  {		pause();		_clip.visible = false;	}		private function clickHandler(e:MouseEvent):void {		_view.sendEvent(_view.config['displayclick']);	}		}}