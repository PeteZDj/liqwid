/*       *      Copyright 2009 (c) Scott Penberthy, scottpenberthy.com. All Rights Reserved. *       *      This software is distributed under commercial and open source licenses. *      You may use the GPL open source license described below or you may acquire  *      a commercial license from scottpenberthy.com. You agree to be fully bound  *      by the terms of either license. Consult the LICENSE.TXT distributed with  *      this software for full details. *       *      This software is open source; you can redistribute it and/or modify it  *      under the terms of the GNU General Public License as published by the  *      Free Software Foundation; either version 2 of the License, or (at your  *      option) any later version. See the GNU General Public License for more  *      details at: http://scottpenberthy.com/legal/gplLicense.html *       *      This program is distributed WITHOUT ANY WARRANTY; without even the  *      implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  *       *      This GPL license does NOT permit incorporating this software into  *      proprietary programs. If you are unable to comply with the GPL, you must *      acquire a commercial license to use this software. Commercial licenses  *      for this software and support services are available by contacting *      scott.penberthy@gmail.com. * */  // TODO Blend presets when they change, Geiss style // TODO optimize this.  The Milkdrop variable scoping is, um, unique.package com.jsp.config {	import flash.display.BitmapData;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.utils.Timer;	import flash.utils.getTimer;	import com.jsp.audio.MusicAnalyzer;	import com.jsp.audio.Wave;	import com.jsp.calculator.*;	import com.jsp.graphics.Border;	import com.jsp.graphics.Frame;	import com.jsp.graphics.uvPolygon;	import com.jsp.graphics.uvSprite;	import com.jsp.graphics.Shader;	import com.jsp.graphics.SlideShow;	import com.jsp.graphics.Chart;	import com.jsp.video.Webcam;	import com.jsp.feeds.PresetFeed;	import com.jsp.events.LiqwidEvent;	import com.jsp.graphics.Pixel;	public class MilkdropConfig {				public var time:Number;		public var frameNum:Number;		public var useMotionVectors:Boolean=false;		public var modWaveAlphaByVolume:Boolean=false;		public var aStart:Number;		public var aEnd:Number;		public var needCamera:Boolean=false;		public var needSlides:Boolean=false;		public var needVideo:Boolean=false;		public var calc:Calculator;				public static var frameConfig:Object = {			warp: 1.0,			warp_speed: 1.0,			warp_scale: 1.0,			zoom: 1.0,			rot: 0.0,			cx: 0.5,			cy: 0.5,			dx: 0.0,			dy: 0.0,			sx: 1.0,			sy: 1.0,			decay: 0.98,			wave_scale: 1.0,			monitor: 0, // undefined,			time: 0.0,			frame: 0.0,			mouse_x: 0.5,			mouse_y: 0.5,			fps: 24,			rating: 1.0,			progress: 0.5,			darkcenter:0,			darkencenter: 0,			ve_zoom: 0.5,			ve_orient: 1,			ve_alpha: 0,			invert: 0,			brighten: 0,			darken: 0,			solarize: 0,			wave_dots: 0,			max_color: 1,			wave_param: 0.0,			wave_alpha_start: 0.0,			wave_alpha_end: 1.0,			wave_mode: 5,			wave_x: 0.5,			wave_y: 0.5,			wave_r: 0.5,			wave_g: 0.5,			wave_b: 0.5,			wave_a: 1.0,			wave_thick: 1,			wave_additive: 0,			wave_brighten: 1,			mod_wave_alpha_by_volume: 0,			ob_size: 0.001,			ob_r: 0.1,			ob_g: 0.1,			ob_b: 0.8,			ob_a: 0.6,			ib_size: 0.001,			ib_r: 0.2,			ib_g: 0.5,			ib_b: 0.2,			ib_a: 0.2,			scale_sound: 1.0,			wave_smooth: 0,			interpolate: 1,			mid: 0,			bass: 0,			treble: 0,			mid_att: 0,			bass_att: 0,			treble_att: 0,			amp: 0,			meshx: 12,			meshy: 9,			wrap: 1,			q1: 0,			q2: 0,			q3: 0,			q4: 0,			q5: 0,			q6: 0,			q7: 0,			q8: 0,			motionVectors: 0,			mv_r: 1,			mv_g: 1,			mv_b: 1,			mv_a: 0,			mv_x: 4,			mv_y: 4,			mv_dx: 0.01,			mv_dy: 0.01,			mv_l: 1			};				public static const presets:Array = 		[['gamma','fGammaAdj'],		 ['decay','fDecay'],		 ['ve_alpha','fVideoEchoAlpha'],		 ['ve_zoom','fVideoEchoZoom'],		 ['ve_orient','nVideoEchoOrientation'],		 ['wave_mode','nWaveMode'],		 ['additive','bAdditiveWaves'],		 ['max_color','bMaximizeWaveColor'],		 ['wrap','bTexWrap'],		 ['dark_center','bDarkenCenter'],		 ['mv_y','nMotionVectorsY'],		 ['mv_x','nMotionVectorsX'],		 ['brighten','bBrighten'],		 ['darken','bDarken'],		 ['invert','bInvert'],		 ['solarize','bSolarize'],		 ['wave_a','fWaveAlpha'],		 ['wave_dots','bwavedots'],		 ['wave_thick','bwavethick'],		 ['wrap','btexwrap'],		 ['wave_scale','fWaveScale'],		 ['wave_smooth','fWaveSmoothing'],		 ['wave_mystery','fWaveParam'],		 ['wave_alpha_start','fModWaveAlphaStart'],		 ['wave_alpha_end','fModWaveAlphaEnd'],		 ['warp_speed','fWarpAnimSpeed'],		 ['warp_scale','fWarpScale'],		 ['zoom_exp','fZoomExponent'],		 ['shader','fShader']		 ];				public function MilkdropConfig():void {			super();			init();		}				public function mapToFrameVar(preset:String):String {			var canonical:String = preset.toLowerCase();			for (var i:int=0; i < presets.length; i++) {				if (presets[i][1].toLowerCase() == canonical) return presets[i][0];			}			return preset;		}								private function init():void {			useMotionVectors = true;			time = 0;			frameNum = 0;			modWaveAlphaByVolume = false;			aStart = 0;			aEnd = 0;			needCamera = false;			needSlides = false;			needVideo = false;		}		//		// wtf is this		//		public function writeCalcPresets(c:Calculator):void {			calc = c;			calc.clear();						// first, use the defaults we provide, just in case a value			// is not specified in the preset.			for (var key:String in frameConfig) {				calc.store(key, frameConfig[key]);				//trace("Restoring "+key+" to "+_frameConfig[key]);			}						// now add the defaults from the preset, which could be a 			// partial list			for (var i:uint=0; i < presets.length; i++) {				var varName:String = presets[i][0];				var presetName:String = presets[i][1].toLowerCase();				calc.store(presetName,c.lookup(varName));			}			frameNum=0;		}				//		// remember the global preset values		//				public function changePreset(p:String, val:Number, f:Frame, w:Wave, ma:MusicAnalyzer):void {			if (!calc) return;  // maybe change default?			p = p.toLowerCase();			calc.store(p,val);			calc.store(mapToFrameVar(p),val);			updateGlobals();			writeFramePresets(f);			writeWavePresets(w);			writeAnalyzerPresets(ma);		}				protected function updateGlobals():void {			useMotionVectors=bool('bmotionvectorson');			modWaveAlphaByVolume=bool('bmodwavealphabyvolume');			if (modWaveAlphaByVolume) {				aStart = getPreset('wave_alpha_start');				aEnd = getPreset('wave_alpha_end');			}		}					protected function writeGlobalPresets():void {			var len:int = presets.length;			updateGlobals();			for (var i:int=0; i < len; i++) {				var p:Array = presets[i];				preset(p[0],p[1]);			}		}				public function writeWavePresets(w:Wave):void {			w.thick=bool('bwavethick') ? 4 : 1;			w.dots=bool('bwavedots');			w.brightColors=bool('bmaximizewavecolor');			w.a=getPreset('wave_a');			w.mystery=getPreset('wave_mystery');		}				public function writeFramePresets(f:Frame):void {			f.additive=bool('badditivewaves');			f.echo=bool('ve_alpha');			f.echoAlpha=getPreset('ve_alpha');			f.echoOrient=getPreset('ve_orient');			f.echoZoom=getPreset('ve_zoom');			f.solarize=bool('solarize');			f.lighten=bool('brighten');			f.darken=bool('darken');			f.decay=getPreset('decay');			f.invert = bool('invert');			f.wrapTexture = bool('wrap');		}				public function writeAnalyzerPresets(ma:MusicAnalyzer):void {			ma.wave_scale=getPreset('wave_scale');			ma.wave_smooth=getPreset('wave_smooth');		}				public function writePresets(c:Calculator, f:Frame, w:Wave, ma:MusicAnalyzer):void {			calc = c;			writeGlobalPresets();			writeFramePresets(f);			writeWavePresets(w);			writeAnalyzerPresets(ma);		}							//		// Utilities		//				private function getPreset(name:String):Number {			var val:Number=calc.lookup(name.toLowerCase());			if (isNaN(val)) {				trace("Defaulting "+name+" in frame");				return frameConfig[name];			} else {				//trace("Preset "+name+" changed to "+val);				return val;			}		}		private function preset(varName:String, presetName:String):void {			calc.store(varName.toLowerCase(), getPreset(presetName.toLowerCase()));		}		private function bool(name:String):Boolean {			var val:Number=calc.lookup(name.toLowerCase());			if (isNaN(val)) {				return false;			} else {				return (val != 0);			}		}	}}