package com.jsp.events {	//	// JavaScript to Flash interface, via events	//	// JavaScript loads the flash object, then defines "jsReady()" to return True.	// This tells Flash that JavaScript can now send and receive events, completing	// the synchronization of the flash and web browser loaders.	//	// JavaScript calls "jsToFlash({type: string, data: *})" to send an event of TYPE with OBJECT	// as the data of the event.	//	// Flash calls "flashToJS({type: string, data: *})" to send an event of type TYPE with OBJECT	// as the data of the event.. to JavaScript.	//	// Flash receives JSEvent(type, data) events internally.	// JavaScript receives calls to flashEvent({type: type, data: data});	//	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.TimerEvent;	import flash.external.ExternalInterface;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.utils.Timer;		public class JavaScriptAPI extends EventDispatcher {		public static const JS_TRACK : String = "flashTrack";		public static const INIT : String = "init";		public static const FAIL : String = "fail";		private static var __instance : JavaScriptAPI;		private var eventDispatcher : EventDispatcher;		private var _call_back_function : String = 'flashEvent';		private var _load_callback : String;		private var _debug : Boolean;		private var _safe_mode : Boolean = true;		public static const BROWSER_LOG_FUNCTION : String = "window.console.log";		/**		 * 		 */		public function set callBackFunction(value : String) : void {			_call_back_function = value;			}		/**		 * 		 */		public function set debug(value : Boolean) : void {			_debug = value;		}		public function set onLoadFunction(value : String) : void {			_load_callback = value;			}		/**		 * 		 */		public function JavaScriptAPI(enforcer : SingletonEnforcer) {			eventDispatcher = new EventDispatcher();		}		/**		 * 		 */		public static function get instance() : JavaScriptAPI {			if(JavaScriptAPI.__instance == null) {				JavaScriptAPI.__instance = new JavaScriptAPI(new SingletonEnforcer());			}			return JavaScriptAPI.__instance;		}		/**		 * Use this method to activate the ExternalInterface and its default methods, "sendToActionScript" and "ASEvent".		 * @param call_back_function: String - name of JS method to be called when JavaScriptAPI is activated.		 */		public function activate() : void {        			if (ExternalInterface.available) {				try {					jsTrace("JavaScriptAPI Safe Mode = " + _safe_mode + "\n");					if(_safe_mode) {						jsTrace("Adding callback...\n");						if (checkJsReady()) {							jsTrace("JavaScript is ready.\n");							onJsConnection();						} else {							jsTrace("JavaScript is not ready.\n");							var readyTimer : Timer = new Timer(100, 0);							readyTimer.addEventListener(TimerEvent.TIMER, timer_handler);							readyTimer.start();						}					}else {						onJsConnection();					}				} catch (error : SecurityError) {					jsTrace("A SecurityError occurred: " + error.message + "\n");				} catch (error : Error) {					jsTrace("An Error occurred: " + error.message + "\n");				}			} else {				jsTrace("** No External Interface available **");				dispatchEvent(new Event(JavaScriptAPI.FAIL, true, true));			}		}		/**		 * Converts an event object recieved from JS into a flash JSEvent.		 * @param event: Object - event from js.		 */		private function jsToFlash(event : Object) : void {			jsTrace("JS Event Type: " + event.type + "\n");			dispatchEvent(new JSEvent(event.type, event.data, true, true));		}		/**		 * dispatch an event object to JS. If an event is returned is passed over to the jsToFlash to be converted into a FlashEvent.		 * @param event: Object - event to js.		 */		public function sendEvent(type:String, data: *): void {			var data : * = ExternalInterface.call('flashEvent', {type: type, data: data});			if(data) {				jsToFlash(data);			}		}		/**		 * Checks to see if JS is ready.		 */		private function checkJsReady() : Boolean {			var isReady : Boolean = ExternalInterface.call("jsReady");			return isReady;		}		/**		 * 		 */		private function timer_handler(event : TimerEvent) : void {			jsTrace("Checking JavaScript status...\n");			var isReady : Boolean = checkJsReady();			if (isReady) {				Timer(event.target).stop();				onJsConnection();			}		}		/**		 * This is a special track call for flash to use.		 * calls this function on JS side - flashClick:function(url, handler, params, new_window)		 * Updated to make an interal url request because of pop up blocker problem when JS handled the url		 * @param url		 * @param handler		 * @param params		 * @param new_window		 */		public function flashTrack(url : String, handler : String, params : Object, new_window : Boolean = false) : void {						jsTrace("url : " + url + ", handler : " + handler + ", params : " + params + ", new_window : " + new_window);						ExternalInterface.call(JS_TRACK, url, handler, params, new_window);			if(url){				if(url.length > 1) {					var request : URLRequest = new URLRequest(url);					var window : String = "_self";					if(new_window)						window = "_blank";					navigateToURL(request, window);				}			}		}		/**		 * 		 */		private function onJsConnection() : void {			jsTrace("JavaScript is ready - onJSConnection\n ");			trace(ExternalInterface.addCallback("ASEvent", jsToFlash));			dispatchEvent(new Event(JavaScriptAPI.INIT, true, true));						// If a load callback function exists it will be called			if(_load_callback)				ExternalInterface.call(_load_callback);		}		/**		 * JavaScrip "trace" emulator for outputting traces to the JS Debugger.		 */		public function jsTrace(value : *) : void {			if(_debug) {				trace(value);				if (ExternalInterface.available && _debug) {					ExternalInterface.call(BROWSER_LOG_FUNCTION, value);				}			}		}		/**		 * Calls any generic registered JavaScript Function through the ExternalInterface. This does not support any extra perams or returned data.		 * @param function_name:String - string name of the function to be called		 */		public function call(function_name : String, parms:* = null) : void {			ExternalInterface.call(function_name,parms);		}	}}class SingletonEnforcer {}