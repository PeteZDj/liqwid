/*       *      Copyright 2009 (c) Scott Penberthy, scottpenberthy.com. All Rights Reserved. *       *      This software is distributed under commercial and open source licenses. *      You may use the GPL open source license described below or you may acquire  *      a commercial license from scottpenberthy.com. You agree to be fully bound  *      by the terms of either license. Consult the LICENSE.TXT distributed with  *      this software for full details. *       *      This software is open source; you can redistribute it and/or modify it  *      under the terms of the GNU General Public License as published by the  *      Free Software Foundation; either version 2 of the License, or (at your  *      option) any later version. See the GNU General Public License for more  *      details at: http://scottpenberthy.com/legal/gplLicense.html *       *      This program is distributed WITHOUT ANY WARRANTY; without even the  *      implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  *       *      This GPL license does NOT permit incorporating this software into  *      proprietary programs. If you are unable to comply with the GPL, you must *      acquire a commercial license to use this software. Commercial licenses  *      for this software and support services are available by contacting *      scott.penberthy@gmail.com. * */package com.jsp.graphics{	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.geom.Matrix;	import flash.net.URLRequest;	public class Texture extends Sprite	{		private var _url:String;		private var _error:Boolean;		protected var _w:Number;						// width of texture		protected var _h:Number;						// height of texture		private var _raw:BitmapData;		protected var _backgroundColor:uint = 0x000000; // when we center a picture, what is the background color				public function Texture(url:String)		{			_url = url;			init();		}				private function init():void {			_w = _h = 0;			_raw = null;		}				public function load():void {			var loader:Loader = new Loader();			var req:URLRequest = new URLRequest(_url);						_raw = null;			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadHandler);			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, ioHandler);			loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityHandler);			loader.load(req);		}				public function reload(url:String):void {			_raw = null;			_error = false;			_url = url;			load();		}				private function ioHandler(e:IOErrorEvent):void {			// 			// Throw an error?			//			_error = true;			trace("IO Error on texture: "+e.text);			//e.stopImmediatePropagation();			e.stopPropagation();		}				private function securityHandler(e:SecurityErrorEvent):void {			// 			// Throw an error?			//			_error = true;			_w = _h = 0;			trace("Security Error on texture: "+e.text);		}				private var _bitmap:Bitmap = null;				private function resizeBitmapData(bmd:BitmapData):BitmapData {			var bmd2:BitmapData;			var w:Number, h:Number;			var m:Matrix;						if (_w == 0 || _h == 0) return bmd;			w = bmd.width;			h = bmd.height;			if (_w > _h) {				if (w > h) {					h *= (_w/w);					w = _w;				}				else {					w *= (_h/h);					h = _h;				}			}			else {				if (h > w) {					w *= (_h/h);					h = _h;				}				else {					h *= (_w/w);					w = _w;				}			}			w=Math.round(w);			h=Math.round(h);			//trace(".. picture resized to "+w+"x"+h+" from "+bmd.width+"x"+bmd.height);			m = new Matrix();			m.scale(w/bmd.width, h/bmd.height);			m.translate(0.5*(_w-w), 0.5*(_h-h));						// create the new bitmap, which just fits within _w x _h			//						bmd2 = new BitmapData(_w,_h,false,_backgroundColor);			bmd2.draw(bmd,m);			bmd.dispose();			return bmd2;		}				private function loadHandler(e:Event):void {			// 			// Throw an error?			//			//trace("Loaded "+_url);			var li:LoaderInfo = e.target as LoaderInfo;			var bmd:BitmapData = resizeBitmapData(Bitmap(li.content).bitmapData);			var bmp:Bitmap = new Bitmap(bmd);			if (_bitmap != null) {				removeChild(_bitmap);			}			_bitmap = bmp;			addChild(bmp);						_raw = bmd;			_w = bmp.width;			_h = bmp.height;			dispatchEvent(new Event(Event.COMPLETE, true, false));		}				public function get raw():BitmapData {			return _raw;		}			}}