/*       *      Copyright 2009 (c) Scott Penberthy, scottpenberthy.com. All Rights Reserved. *       *      This software is distributed under commercial and open source licenses. *      You may use the GPL open source license described below or you may acquire  *      a commercial license from scottpenberthy.com. You agree to be fully bound  *      by the terms of either license. Consult the LICENSE.TXT distributed with  *      this software for full details. *       *      This software is open source; you can redistribute it and/or modify it  *      under the terms of the GNU General Public License as published by the  *      Free Software Foundation; either version 2 of the License, or (at your  *      option) any later version. See the GNU General Public License for more  *      details at: http://scottpenberthy.com/legal/gplLicense.html *       *      This program is distributed WITHOUT ANY WARRANTY; without even the  *      implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  *       *      This GPL license does NOT permit incorporating this software into  *      proprietary programs. If you are unable to comply with the GPL, you must *      acquire a commercial license to use this software. Commercial licenses  *      for this software and support services are available by contacting *      scott.penberthy@gmail.com. * */package com.jsp.graphics{	import com.jsp.events.LiqwidEvent;		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IEventDispatcher;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import com.jsp.global.Config;		public class Flickr extends EventDispatcher	{		private static var _secret:String = Config.FLICKR_SECRET;		private static var _key:String = Config.FLICKR_KEY;		private static var _apiBase:String = "http://api.flickr.com/services/rest/?method=";		private static var _proxy:String = Config.PROXY;			public function Flickr(target:IEventDispatcher=null)		{			super(target);		}				//		// Retrieving interesting photos		//		// interestingPhotos();		// 		// We throw a LiqwidEvent.IMAGE_LIST whose data is {imageList: array} where		// array contains 64 objects of the form		//		// {source: "url string", thumb: "url string", title: "tag list", geo: "Geography info"}		//				public function interestingPhotos():void {			var apiURL:String = interesting();			var u:URLRequest = new URLRequest(apiURL);			var l:URLLoader = new URLLoader();						trace("Searching "+apiURL+" ...");						l.addEventListener(Event.COMPLETE, gotInteresting);			l.addEventListener(IOErrorEvent.IO_ERROR, ioError);			l.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);			l.load(u);		}				private function interesting():String {			var ans:String = _apiBase+"flickr.interestingness.getList";				ans += "&api_key="+_key;			ans += "&per_page=64";			ans += "&extras=tags,geo";			return ans;		}				private function gotInteresting(e:Event):void {			var l:URLLoader = e.target as URLLoader;			var xml:XML = XML(l.data);			var result:Array = new Array();;						for each (var photo:XML in xml.photos.photo) {				result.push({source: flickrURL(photo),							 thumb:  flickrThumb(photo),							 title: photo.tags,							 geo: photo.geo});			}						dispatchEvent(new LiqwidEvent(LiqwidEvent.IMAGE_LIST, {imageList: result}, true, false));		}				private function flickrURL(photo:XML):String {			var ans:String = 'http://farm'+photo.@farm+'.static.flickr.com';			ans += '/'+photo.@server+'/'+photo.@id+'_'+photo.@secret+'.jpg';			return Config.proxify(ans);		}				private function flickrThumb(photo:XML):String {			var ans:String = 'http://farm'+photo.@farm+'.static.flickr.com';			ans += '/'+photo.@server+'/'+photo.@id+'_'+photo.@secret+'_t.jpg';			return Config.proxify(ans); 		}		private function ioError(e:IOErrorEvent):void {			trace("Flickr IO Error: "+e.text);		}  				private function onSecurityError(e:SecurityErrorEvent):void {			trace("Flickr IO Error: "+e.text);		}			}}